#define SENSOR_PORT 4						// port where is sensor attached
#define SENSOR_READ analog(SENSOR_PORT)
#define PROBES 5							// how much measurements robot will keep
#define MOTOR_LEFT 0						// motor output where is left motor attached
#define MOTOR_RIGHT 1						// same for right motor
#define MOTOR_MAX_POWER 60					// says for itself
#define SLEEP_TIME 25L						// how many milliseconds we will sleep between cycles
#define TRIGGER_LEVEL 610					// if summ of last /PROBES/ measurements is larger than this, we are near wall

int array_summ(int array[])
{   
    int i = 0;
    int arrMaxIdx = _array_size(array) - 1;
    int summ = 0;
    
    for(i = 0; i <= arrMaxIdx; i = i + 1)
    {
        summ = summ + array[i];
    }
    
    return summ;
} 

/**
 * plays weeoow sound /beeps/ times with choosen speed. NOTICE: will not execute any commands while running this command
 * @param beeps [description]
 * @param speed [description]
 */
void beeper_alert(int beeps, float speed)
{
    int beeped = 0;
    float pitch = 0.;
    
    beeper_on();
    
    while(beeps >= beeped)
      {  
        
        for(pitch = 6500.; pitch > 100.; pitch = pitch - speed)
          set_beeper_pitch(pitch);
        
        for(pitch = 100.; pitch < 6500.; pitch = pitch + speed)
          set_beeper_pitch(pitch);
        
        beeped = beeped + 1;
    }
    
    beeper_off();
}

/**
 * fills array with zeros. Used to initialize array with random size
 * @param array [description]
 */
void array_fillWithZeros(int array[])
{    
    int i = 0;
    int arrMaxIdx = _array_size(array) - 1;
    
    for(i = 0; i <= arrMaxIdx; i = i + 1)
    {
        array[i] = 0;
    }
}

/**
 * Return 1 if all values in array is strictly descending from first to last
 * @param  array [description]
 * @return       [description]
 */
int array_isDescending(int array[])
{    
    int i = 0;
    int comparisonChain = 0;
    int arrMaxIdx = _array_size(array) - 1;
    
    for(i = 0; i < arrMaxIdx; i = i + 1)
      {
        if( array[i] > array[i + 1] )
          {
            comparisonChain = comparisonChain + 1;
        }
    }
    
    if( comparisonChain == arrMaxIdx ) 
      return 1;
    else
      return 0;
}

/**
 * will put value at first array cell( 0 )
 * and move all other cells down
 * previous data in last cell will be lost
 * @param array [description]
 * @param value [description]
 */
void array_pop(int array[], int value)
{    
    int arrMaxIdx = _array_size(array) - 1;
    int i = 0;
    
    for(i = arrMaxIdx; i >= 1; i = i - 1)
      {
        array[i] = array[i-1];
    }
    array[0] = value;
}

/**
 * Print all values from array on LCD separated by spaces
 * Not terminating screen buffer by \n as we probably need to print values inside some labels
 * @param array [description]
 */
void array_print(int array[])
{    
    int arrSize = _array_size(array);
    int i = 0;
    
    for(i = 0; i < arrSize; i = i + 1)
    {
        printf("%d ", array[i]);
    }
}

int sensor_data[PROBES];

void main()
{
    array_fillWithZeros(sensor_data);
    
    printf("Press start     button to begin\n");
    start_press();
    printf("Running...\n");
    
    while(!stop_button())
    {
      	// spin left and right motors forward
        motor(MOTOR_LEFT, MOTOR_MAX_POWER);
        motor(MOTOR_RIGHT, MOTOR_MAX_POWER);        
        
        array_pop(sensor_data, SENSOR_READ);
        
#ifdef DEBUG
        
        array_print(sensor_data);
        printf("\n");

#endif
        
        if( wallIsNear(sensor_data) )
        {
            waitForAction();
        }
        
        msleep(SLEEP_TIME);
        
    }
    
    motors_stop();
    
}

int wallIsNear(int sensor_data[]) 
{
	return array_summ(sensor_data) > TRIGGER_LEVEL;
}

void motors_stop() 
{
	off(MOTOR_LEFT);
    off(MOTOR_RIGHT);
}

void waitForAction() 
{
	motors_stop();
        
    beeper_alert(6,400.);
    
    while(!start_button())
    {
        printf("Wall is near!   Distance:%d\n", SENSOR_READ);
        // 60ms - will give us 16 fps;
        msleep(60L);
    }
    printf("Running...\n");
}