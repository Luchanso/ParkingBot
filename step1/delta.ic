/**
 * Author: Loutchansky Oleg
 * Move step by step calculation
 */


#define MOTOR_LEFT 0
#define MOTOR_RIGHT 1
#define MOTOR_POWER 75
#define MOTOR_TIME_WORK 25L

/**
 * First critical range
 */
#define MINIMAL_DETECTED_RANGE 50
/**
 * Maximal critical delta range
 */
#define MAXIMAL_DETECTED_RANGE 130

void delta_move() {
    
    int portCenter = 4;
    int rangeCenter  = sensorRange(portCenter);
    
    int lastRangeCenter = 0;
    
    int step      = 0;
    int deltaRange   = 0;
    
    if (checkFirstPosition(rangeCenter)) {
        
        finish(rangeCenter, step);
        return;
        
    }
    
    while(1) {
        
        moveOneStep();
        step++;

        rangeCenter = sensorRange(portCenter);
        
        if (rangeIsCritical(rangeCenter)) {
            
            finish(rangeCenter, step);
            break;
            
        }
        
    }
    
}

/**
 * Checking first position 
 * @param sensorRange [description]
 */
int checkFirstPosition(int sensorRange) {
    
    return sensorRange > MINIMAL_DETECTED_RANGE;
    
}

int rangeIsCritical(int range) {
    
    return range > MAXIMAL_DETECTED_RANGE;
    
}

void moveOneStep() {
    
    motor(MOTOR_LEFT, MOTOR_POWER);
    motor(MOTOR_RIGHT, MOTOR_POWER);
    
    msleep(MOTOR_TIME_WORK);
    
    motor(MOTOR_LEFT, 0);
    motor(MOTOR_RIGHT, 0);
}

int sensorRange(int port) {
    
    return analog(port);
    
}

void finish(int range, int step) {
    
    printf("Range: %d Step: %d\n", range, step);
    tone(5000.0, 0.3);
    tone(5000.0, 0.3);
    tone(5000.0, 0.3);
    
}
